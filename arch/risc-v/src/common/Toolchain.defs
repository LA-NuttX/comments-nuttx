############################################################################
# arch/risc-v/src/common/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# Setup for the selected toolchain

#
# Handle old-style chip-specific toolchain names in the absence of
# a new-style toolchain specification, force the selection of a single
# toolchain and allow the selected toolchain to be overridden by a
# command-line selection.
#

ifeq ($(filter y, $(CONFIG_RISCV_TOOLCHAIN_GNU_RVG)),y)
  CONFIG_RISCV_TOOLCHAIN ?= GNU_RVG
endif
# 如果配置了 CONFIG_RISCV_TOOLCHAIN_GNU_RVG=y ，那么设置CONFIG_RISCV_TOOLCHAIN ?= GNU_RVG
# 定义在nuttx/arch/risc-v/Kconfig，

#
# Supported toolchains
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   options, etc.
#  ARCHOPTIMIZATION The optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION += $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ARCHOPTIMIZATION += -Os
endif

ifneq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -fno-strict-aliasing
endif
# 允许不同指针指向同一个内存地址

ifeq ($(CONFIG_FRAME_POINTER),y)
  ARCHOPTIMIZATION += -fno-omit-frame-pointer -fno-optimize-sibling-calls
else
  ARCHOPTIMIZATION += -fomit-frame-pointer
endif
# 去掉函数调用时的frame pointer, frame pointer在函数回溯时比较有用

ifeq ($(CONFIG_STACK_CANARIES),y)
  ARCHOPTIMIZATION += -fstack-protector-all
endif
# 其为所有的函数都进行栈溢出检测

ifeq ($(CONFIG_ARCH_COVERAGE_ALL),y)
  ARCHOPTIMIZATION += -fprofile-generate -ftest-coverage
endif
# fprofile-generate在实际运行时，应用程序将记录某些事件，如果在编译时知道此使用模式，则这些事件可以提高性能
# ftest-coverage它包含了程序块和行号等信息

ARCHCFLAGS += -fno-common
#禁止将未初始化的全局变量放入到common段。这样就不会出现存在多个同名全局变量而编译时不报错的情况。
ARCHCXXFLAGS += -fno-common -nostdinc++

ARCHCFLAGS += -Wall -Wstrict-prototypes -Wshadow -Wundef
ARCHCXXFLAGS += -Wall -Wshadow -Wundef
# Warning Options

ifneq ($(CONFIG_CXX_EXCEPTION),y)
  ARCHCXXFLAGS += -fno-exceptions -fcheck-new
endif

ifneq ($(CONFIG_CXX_RTTI),y)
  ARCHCXXFLAGS += -fno-rtti
endif

ifeq ($(CONFIG_ARCH_RV32),y)
LDFLAGS += -melf32lriscv
else
LDFLAGS += -melf64lriscv
endif
#链接选项，查看binutils manual,-m表示仿真
# Optimization of unused sections

ifeq ($(CONFIG_DEBUG_OPT_UNUSED_SECTIONS),y)
  LDFLAGS          += --gc-sections
  ARCHOPTIMIZATION += -ffunction-sections -fdata-sections
endif

LDFLAGS += -nostdlib

# Debug link map

ifeq ($(CONFIG_DEBUG_LINK_MAP),y)
  LDFLAGS += --cref -Map=$(call CONVERT_PATH,$(TOPDIR)$(DELIM)nuttx.map)
endif

ifeq ($(CONFIG_DEBUG_SYMBOLS),y)
  ARCHOPTIMIZATION += -g
endif
#生成debug调试信息
# Generic GNU RVG toolchain

ifeq ($(CONFIG_RISCV_TOOLCHAIN),GNU_RVG)

  # Generic GNU RVG toolchain

  CROSSDEV ?= riscv64-unknown-elf-

  # Detect cpu ISA support flags

  ifeq ($(CONFIG_ARCH_RV_ISA_M),y)
    ARCHRVISAM = m
  endif

  ifeq ($(CONFIG_ARCH_RV_ISA_A),y)
    ARCHRVISAA = a
  endif
  
  ifeq ($(CONFIG_ARCH_RV_ISA_C),y)
    ARCHRVISAC = c
  endif

  ifeq ($(CONFIG_ARCH_FPU),y)
    ARCHRVISAF = f
  endif

  ifeq ($(CONFIG_ARCH_DPFPU),y)
      ARCHRVISAD = d
  endif

  # Detect abi type

  ifeq ($(CONFIG_ARCH_RV32),y)
    ARCHTYPE = rv32
    ARCHABITYPE = ilp32
  else ifeq ($(CONFIG_ARCH_RV64),y)
    ARCHTYPE = rv64
    ARCHABITYPE = lp64
  endif

  # Construct arch flags

  ARCHCPUFLAGS = -march=$(ARCHTYPE)i$(ARCHRVISAM)$(ARCHRVISAA)$(ARCHRVISAF)$(ARCHRVISAD)$(ARCHRVISAC)

  # Construct arch abi flags

  ifeq ($(CONFIG_ARCH_DPFPU),y)
    ARCHCPUFLAGS += -mabi=$(ARCHABITYPE)d
  else ifeq ($(CONFIG_ARCH_FPU),y)
    ARCHCPUFLAGS += -mabi=$(ARCHABITYPE)f
  else
    ARCHCPUFLAGS += -mabi=$(ARCHABITYPE)
  endif

endif

ifeq ($(CONFIG_MM_KASAN_ALL),y)
  ARCHOPTIMIZATION += -fsanitize=kernel-address
endif

ifeq ($(CONFIG_MM_UBSAN_ALL),y)
  ARCHOPTIMIZATION += $(CONFIG_MM_UBSAN_OPTION)
endif

ifeq ($(CONFIG_MM_UBSAN_TRAP_ON_ERROR),y)
  ARCHOPTIMIZATION += -fsanitize-undefined-trap-on-error
endif

# Default toolchain

CC      = $(CROSSDEV)gcc
CXX     = $(CROSSDEV)g++
CPP     = $(CROSSDEV)gcc -E -P -x c
STRIP   = $(CROSSDEV)strip --strip-unneeded
OBJCOPY = $(CROSSDEV)objcopy
OBJDUMP = $(CROSSDEV)objdump
LD      = $(CROSSDEV)ld
AR      = $(CROSSDEV)ar rcs
NM      = $(CROSSDEV)nm

# Link Time Optimization

ifeq ($(CONFIG_LTO_FULL),y)
  ARCHOPTIMIZATION += -flto
  ifeq ($(CONFIG_RISCV_TOOLCHAIN),GNU_RVG)
    LD := $(CROSSDEV)gcc
    AR := $(CROSSDEV)gcc-ar rcs
    NM := $(CROSSDEV)gcc-nm
    ARCHOPTIMIZATION += -fuse-linker-plugin
    ARCHOPTIMIZATION += -fno-builtin
  endif
endif

# Add the builtin library

EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-libgcc-file-name))

ifneq ($(CONFIG_LIBM),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libm.a))
endif

ifeq ($(CONFIG_LIBSUPCXX),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libsupc++.a))
endif

ifeq ($(CONFIG_ARCH_COVERAGE),y)
  EXTRA_LIBS += $(wildcard $(shell $(CC) $(ARCHCPUFLAGS) --print-file-name=libgcov.a))
endif
